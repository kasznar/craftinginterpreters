[]src.Stmt{src.BlockStmt{statements:[]src.Stmt{src.VarStmt{name:src.Token{tokenType:"IDENTIFIER", lexeme:"i", literal:interface {}(nil), line:2}, initializer:(*src.Expr)(0x14000022030)}, src.WhileStmt{condition:src.BinaryExpr{Left:src.VariableExpr{Name:src.Token{tokenType:"IDENTIFIER", lexeme:"i", literal:interface {}(nil), line:3}}, Operator:src.Token{tokenType:"LESS", lexeme:"<", literal:interface {}(nil), line:3}, Right:src.LiteralExpr{Value:20}}, body:src.BlockStmt{statements:[]src.Stmt{src.BlockStmt{statements:[]src.Stmt{src.PrintStmt{expression:src.VariableExpr{Name:src.Token{tokenType:"IDENTIFIER", lexeme:"i", literal:interface {}(nil), line:5}}}}}, src.ExpressionStmt{expression:src.AssignExpr{Name:src.Token{tokenType:"IDENTIFIER", lexeme:"i", literal:interface {}(nil), line:7}, Value:src.BinaryExpr{Left:src.VariableExpr{Name:src.Token{tokenType:"IDENTIFIER", lexeme:"i", literal:interface {}(nil), line:7}}, Operator:src.Token{tokenType:"PLUS", lexeme:"+", literal:interface {}(nil), line:7}, Right:src.LiteralExpr{Value:1}}}}}}}}}}
